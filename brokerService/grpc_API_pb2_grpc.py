# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_API_pb2 as grpc__API__pb2


class BrokerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostNewPost = channel.unary_unary(
                '/grpcApi.BrokerService/PostNewPost',
                request_serializer=grpc__API__pb2.PostNewPostRequest.SerializeToString,
                response_deserializer=grpc__API__pb2.PostNewPostResponse.FromString,
                )


class BrokerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PostNewPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PostNewPost': grpc.unary_unary_rpc_method_handler(
                    servicer.PostNewPost,
                    request_deserializer=grpc__API__pb2.PostNewPostRequest.FromString,
                    response_serializer=grpc__API__pb2.PostNewPostResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcApi.BrokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BrokerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PostNewPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcApi.BrokerService/PostNewPost',
            grpc__API__pb2.PostNewPostRequest.SerializeToString,
            grpc__API__pb2.PostNewPostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BackendServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPostsByChannel = channel.unary_unary(
                '/grpcApi.BackendService/GetPostsByChannel',
                request_serializer=grpc__API__pb2.GetPostsByChannelRequest.SerializeToString,
                response_deserializer=grpc__API__pb2.GetPostsByChannelResponse.FromString,
                )
        self.GetSubChannels = channel.unary_unary(
                '/grpcApi.BackendService/GetSubChannels',
                request_serializer=grpc__API__pb2.GetSubChannelsRequest.SerializeToString,
                response_deserializer=grpc__API__pb2.GetSubChannelsResponse.FromString,
                )
        self.ErrorInDelievery = channel.unary_unary(
                '/grpcApi.BackendService/ErrorInDelievery',
                request_serializer=grpc__API__pb2.ErrorInDelieveryRequest.SerializeToString,
                response_deserializer=grpc__API__pb2.ErrorInDelieveryResponse.FromString,
                )
        self.PostNewSub = channel.unary_unary(
                '/grpcApi.BackendService/PostNewSub',
                request_serializer=grpc__API__pb2.PostNewSubRequest.SerializeToString,
                response_deserializer=grpc__API__pb2.PostNewSubResponse.FromString,
                )


class BackendServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPostsByChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ErrorInDelievery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostNewSub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPostsByChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostsByChannel,
                    request_deserializer=grpc__API__pb2.GetPostsByChannelRequest.FromString,
                    response_serializer=grpc__API__pb2.GetPostsByChannelResponse.SerializeToString,
            ),
            'GetSubChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubChannels,
                    request_deserializer=grpc__API__pb2.GetSubChannelsRequest.FromString,
                    response_serializer=grpc__API__pb2.GetSubChannelsResponse.SerializeToString,
            ),
            'ErrorInDelievery': grpc.unary_unary_rpc_method_handler(
                    servicer.ErrorInDelievery,
                    request_deserializer=grpc__API__pb2.ErrorInDelieveryRequest.FromString,
                    response_serializer=grpc__API__pb2.ErrorInDelieveryResponse.SerializeToString,
            ),
            'PostNewSub': grpc.unary_unary_rpc_method_handler(
                    servicer.PostNewSub,
                    request_deserializer=grpc__API__pb2.PostNewSubRequest.FromString,
                    response_serializer=grpc__API__pb2.PostNewSubResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcApi.BackendService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackendService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPostsByChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcApi.BackendService/GetPostsByChannel',
            grpc__API__pb2.GetPostsByChannelRequest.SerializeToString,
            grpc__API__pb2.GetPostsByChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcApi.BackendService/GetSubChannels',
            grpc__API__pb2.GetSubChannelsRequest.SerializeToString,
            grpc__API__pb2.GetSubChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ErrorInDelievery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcApi.BackendService/ErrorInDelievery',
            grpc__API__pb2.ErrorInDelieveryRequest.SerializeToString,
            grpc__API__pb2.ErrorInDelieveryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostNewSub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcApi.BackendService/PostNewSub',
            grpc__API__pb2.PostNewSubRequest.SerializeToString,
            grpc__API__pb2.PostNewSubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
